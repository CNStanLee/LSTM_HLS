

#define AP_INT_MAX_W 96

#include "bnn-library.h"

// includes for network parameters
#include "weights.hpp"
#include "activations.hpp"
#include "mvau.hpp"
// #include "thresh.h"

// defines for network parameters
#define MW1 3
 #define MH1 32

            #define SIMD1 3
 #define PE1 8
 #define WMEM1 4

            #define TMEM1 4
 #define numReps 30
#define WP1 4

//in0_V: SIMD(3) X Input_precision(8) = 24 bits
//weights_V: MW1(3) X PE1(8) X WP1(4) = 96 bits
//out_V:  PE1(8) X Output_precision(4) = 32 bits

static ThresholdsActivation<4,8,15,ap_int<13>,ap_uint<4>,0,comp::less_equal<ap_int<13>, ap_int<13>>> threshs                     = {{{{86, 99, 112, 125, 137, 150, 163, 176, 188, 201, 214, 227, 240, 252,
    265},
   {-514, -460, -407, -353, -300, -246, -193, -139, -86, -32, 21, 75,
    128, 182, 235},
   {-275, -248, -222, -195, -169, -142, -115, -89, -62, -36, -9, 17, 44,
    70, 97},
   {373, 403, 434, 465, 496, 527, 557, 588, 619, 650, 681, 711, 742,
    773, 804}},

  {{372, 398, 424, 450, 477, 503, 529, 555, 581, 607, 633, 660, 686,
    712, 738},
   {-244, -219, -194, -169, -144, -119, -94, -69, -44, -18, 7, 32, 57,
    82, 107},
   {287, 317, 347, 377, 407, 437, 467, 497, 527, 557, 587, 617, 647,
    677, 707},
   {302, 329, 357, 384, 411, 438, 466, 493, 520, 548, 575, 602, 629,
    657, 684}},

  {{79, 90, 101, 112, 123, 134, 144, 155, 166, 177, 188, 199, 210, 221,
    232},
   {981, 1064, 1146, 1228, 1311, 1393, 1475, 1558, 1640, 1723, 1805,
    1887, 1970, 2052, 2134},
   {572, 633, 694, 755, 817, 878, 939, 1000, 1061, 1122, 1183, 1244,
    1305, 1366, 1427},
   {-226, -201, -176, -152, -127, -102, -77, -52, -27, -3, 22, 47, 72,
    97, 122}},

  {{85, 98, 112, 125, 138, 151, 164, 177, 190, 203, 216, 229, 243, 256,
    269},
   {103, 117, 132, 146, 161, 175, 190, 204, 219, 233, 247, 262, 276,
    291, 305},
   {619, 684, 748, 812, 876, 941, 1005, 1069, 1133, 1197, 1262, 1326,
    1390, 1454, 1518},
   {1138, 1272, 1405, 1539, 1672, 1806, 1939, 2073, 2206, 2293, 2293,
    2293, 2293, 2293, 2293}},

  {{70, 81, 92, 103, 114, 125, 136, 147, 158, 169, 180, 191, 202, 213,
    224},
   {-61, -44, -27, -10, 7, 24, 41, 58, 75, 92, 109, 126, 143, 160, 177},
   {286, 315, 344, 373, 402, 431, 460, 489, 518, 547, 576, 605, 634,
    662, 691},
   {-361, -326, -291, -256, -221, -186, -151, -116, -81, -46, -11, 24,
    59, 94, 129}},

  {{615, 659, 704, 748, 793, 837, 882, 926, 971, 1015, 1060, 1104, 1149,
    1193, 1238},
   {-283, -242, -200, -158, -116, -74, -32, 9, 51, 93, 135, 177, 218,
    260, 302},
   {593, 642, 690, 738, 786, 834, 882, 930, 978, 1026, 1074, 1123, 1171,
    1219, 1267},
   {-325, -289, -253, -217, -181, -146, -110, -74, -38, -2, 34, 69, 105,
    141, 177}},

  {{260, 278, 296, 313, 331, 349, 366, 384, 402, 420, 437, 455, 473,
    491, 508},
   {-227, -201, -176, -150, -125, -99, -74, -48, -23, 3, 28, 54, 80,
    105, 131},
   {-382, -343, -305, -266, -228, -189, -151, -112, -73, -35, 4, 42, 81,
    119, 158},
   {625, 679, 734, 788, 843, 898, 952, 1007, 1061, 1116, 1170, 1225,
    1280, 1334, 1389}},

  {{382, 411, 439, 468, 497, 525, 554, 582, 611, 639, 668, 697, 725,
    754, 782},
   {-841, -745, -649, -553, -457, -361, -265, -169, -74, 22, 118, 214,
    310, 406, 502},
   {397, 441, 484, 528, 571, 615, 658, 702, 745, 789, 832, 876, 919,
    963, 1006},
   {-281, -238, -196, -153, -110, -67, -24, 19, 62, 105, 148, 190, 233,
    276, 319}}}};


void MVAU_hls_0(
                    hls::stream<ap_uint<24>> &in0_V,
                    hls::stream<ap_uint<96>> &weights_V,
                    hls::stream<ap_uint<32>> &out_V
                    )
{
#pragma HLS INTERFACE axis port=in0_V
#pragma HLS INTERFACE axis port=out_V
#pragma HLS INTERFACE ap_ctrl_none port=return
#pragma HLS INTERFACE axis port=weights_V
#pragma HLS ARRAY_PARTITION variable=threshs.m_thresholds complete dim=1
#pragma HLS ARRAY_PARTITION variable=threshs.m_thresholds complete dim=3
Matrix_Vector_Activate_Stream_Batch<MW1, MH1, SIMD1, PE1, Slice<ap_int<8>>, Slice<ap_uint<4>>, Identity, ap_int<4> >
                (in0_V, out_V, weights_V, threshs, numReps, ap_resource_dflt());
}
